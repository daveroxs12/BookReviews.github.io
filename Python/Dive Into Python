
Chapter 2 -  Your First Python Program 
    def buildConnectionString(params): //Declare a function in Python
       1. Function doesn't specify a return datatype, nor is whether a value is returned specified.
       2. Every Python function returns a value. /
        A. If the function executes a return value, returns that value; else, the function will return a null value 'NONE' 
        
    Types: be
      Strongly-typed language: Language in which types are always enforced, such as, Python. For instance, if yoy haave an nteger, can't treat
      as a string, without explicitly converting it. 'Strong conversion.'
      
      Weakly-Typed Language: A language that disregards type, such as, VBSCcript. For instance, the string '12' can be concatenated with the 
      e to yield the string '123.' 'Weakly disregards type'
      
      Dynamically typed language: A language that discovers types at execution time, sych as, Python, which ascertains the variable type when 
      it is assigned. 'Dynamicslly = Discovers'
      
      Statically-Typed Language: A language in which types arre fixed at execution time, such as Java. All variables required to be 
      declared with type before execurion. 'Statically=Set'
      
      Docuemntation: By using a doc string """"Doing""" '''Hi'''
         MUST BE: First thing defined in a function, after the colon.       
         
      Import: Once a module is imported into Python, call it with module.function.
      
        __doc__ to request one of the module's attributes. //Returns the built-in doc string defined in the function's source code
        
        import fileName //Imports the file as a module
      
      Library Search: 
         import sys
         sys.path
         sys.path.append
         
         
     Object: Everything in Python is an object, in the sense that it can be assigned to a variable, or passed to an argument.
     
     Connection String: 
          def buildConnectionString(params):
              **Build a connection string from a dictionary of parameters
              
              return ",".join(["%s=%s" % (k,v) for k,v in params.items
              
              """Return String. """"
              
     Print Statements: Print Statements can take any type in Python
     
     Equivalency: == for comparsion, and = for assignment.
     
2.6: Testing Modules: 
     
     Modules: Modules are objects, and modules have a built-in attribute of name. 
        Import: If you import __name__, then name is the module's filename. 
        Conversely, __name__ can be run as a standalone program, in which case __name__ will be a special default value.
        import module
        module.__name__
        
Chapter 3: Native Datatypes:
    
    Dictionary: A dictionary in Python is a built-in datatypes, that defines the relationship between keys and values. 
        Note: Dictionaries are case-sensitive
    
        Example 3.1: Defining a dictionary:
            d = {'Server: Theo', 'Name: Owen', 'Name: Owen'}
            d['Server']
            
            Explication: A dictionary is a key-value pair. E.g., 'server,' is a key, and its value, referenced with d['server'], is Theo.
            
            Cannot retreive keys by value. E.g, d['Theo'] returns invalid.
            
            Append dictionary: To append a dictionary reference by the key value, and supplant it with another value.
            E.g., d['Server'] = 'Michal
            
            Dictionary value datetypes: Datatypes can be "mixed and matched" in dictionaries.
            
        Deleting Items: del removes individual items from a dictionary by key; clear deletes all items from a dictionary.
            del d['Server']
            d.clear()
            
    Lists: Hold objects, and expand as needed.
        Negative List Indices: Accesses the end of the list counting backwards.
        
   Example 3.8: Slicing a List:
        listName[1:3] 
        Returns: It returns a subset of the list, from the first slice index, and up to, but not including the last list index.
        
   Example 3.9: Slicing shorthand: 
        0: If the left slice of an index is 0, the 0 is implied. (i.e, list[:3])
        Length of the List: If the right slice of an index is the length of the index, is it implied. (i.e, list[3:])
        
   Example 3.10: Adding Elements to a List:
    Append: Appends a single elemetns to the end of the list (i.e., listName.append('element'))
    
    Insert: Inserts a single elements into the ,ist (i.e, listName.insert(2, 'new')
    
    Extend: Concatenates Lists (i.e, listName.extend(['elementNameOne', 'elementNameTwo'])
    
 Example 3.12: Searching a List:
    listName.index('example') //Returns the first occurence of an index of the list if found, else returns an exception
    
    listName.in('example') //Returns True if the value is in the list, returns False otherwise.
    
Example 3.13: Removing elements from a list:
    Remove: Removes the first occurence of an element in the list listName.remove('element') //If Not Found, returns an exception. 
    
    Pop: listname.pop() It removes the last element of the list, and it returns the value that is removed. 
    
3.3: Introducing Tuples:
    Tuple: A tuple is an immutable list (E.,g, tuple = ('a', 'b', 'c')
    
    Methods: A tuple has no methods, which is why tuples are faster than lists.
    
Chapter 4 - The power of introspection:

4.3: Built-in Functions:

    Type: The TYPE function returns the datatype of a function (E.g, type(1) //Returns type int

    Str: Str converts any datatype to str, including NONE (E.g, str(None))

    DIR: Returns the list of all the methods of a type (E.g, dir(list) returns a directory of all the methods of a list.

    Callable: Returns True if the object is callabe, returns false otherwise (E.g)

    Example 4.9: Built-In Attributes and Functions: import __builtin__

4.4. Getting Object References With getattr: Returns the attribute of a list (E.g, getattr(Person, 'age')

4.5. Filtering Lists:

    Filter expression: A filter expression evaluates true or false (E.g, li = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']; [elem for elem in li if len(elem)>1)
    
4.7. Using lambda Functions:

    Lambda: Mini-functions on the fly.
        E.g, def f(x): return x*2
        
 Chapter 5 - Objects and Object Orientation:
    from file import methods/function - Files are available directly, without calling the file.
    
    Class Names: The convention is to capitalize class names (E.g, Class Loaf: pass)
    
    Pass: Pass can be included in a function without methods or attributes, because there has to be something in the class. (Placeholder)
    
    __init___: __init__ is referring to the current instance of a class. Furthermore, the __init__ methods never returns a value.
    
    Self = self is merely a convention, but a robust convention at that.
        Children Classes: Self must be called in the children classes of a parent.
        
   Chapter 6. Exceptions and File Handling:
   
        Exceptions: except handles exceptions, and raise generates them. (i.e, raise Exception)
        
        Types of Exceptions:
            1. KeyError: A KeyError is generated when attempting to access a non-existent key value.
            2. ValueError: A ValueError is generated when searching a list for a non-existent value.
            3. AttributeError: An AttributeError is generated when calling a non-existent method.
            4. NameError: A NameError is generated when accessing a non-existent variable.
            5. TypeError: A TypeError is generate when datatypes are mixed without coercion.
            
        Raise: When an exception is raised ,it is a handled exception, else it is an unhandled exception. 
        
  6.2: Working with File Objects:
  
    Open: open returns a file object (E.g, open('/user')
        Paramters: Open has three parameters: A filename, a mode, and a buffering parameter.
        
  6.2.1: Reading Files:
    Tell: The tell() method reveals one's current position in the open file.
    
    Seek: The seek(x, y) moves to another position in the open file.
    
    Read: The read(numbers of bytes) returns a string with the read data).
 6.5: Closing a File:
    Closed: The closed boolean indicates whether the file has been closed
    
    Close(): The close() method closes the file
    
6.2.3: Handling IO Errors:
    Finally: The finally, as part of a try, the finally block will always be executed.
    
6.2.4: Writing to Files:
    Open: Open Files, specifices the paramters (E.g, open(filename, 'r'/'w', 0)
    
    Write Method: write() allows one to add data to newly created file
    
    File: The file() function is a synonym for open
        
        
    
    
    
    

        
    
         
      
        
        
